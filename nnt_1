import numpy as np
import matplotlib.pyplot as plt

def sigmoid(x):
    return 1 / (1 + np.exp(-x))

class Neuron:
    def __init__(self,weights,bias):
        self.weights = weights
        self.bias = bias
        
        
    def feedforward(self,inputs):
        output = np.dot(self.weights,inputs) + self.bias
        return sigmoid(output)
    
class NeuralNetwork:
    def __init__(self):
        weights1 = np.array([2,1])
        bias1 = 2
        weights2 = np.array([1,2])
        bias2 = 0
        weights3 = np.array([1,1])
        bias3 = 1
        
        self.h1 = Neuron(weights1,bias1)
        self.h2 = Neuron(weights2,bias2)
        self.o1 = Neuron(weights3,bias3)
        
    def feedforward(self,x):
        out_h1 = self.h1.feedforward(x)
        out_h2 = self.h2.feedforward(x)
        
        out_o1 = self.o1.feedforward(np.array([out_h1,out_h2]))
        
        return out_o1
        
net = NeuralNetwork()
sample_size=64
x = np.linspace(-3,3,sample_size)
y = x + 1
data = np.vstack((x,y))


z = np.zeros(sample_size)
#data = np.hstack((x,y))
for i in range(sample_size):
    z[i] = net.feedforward(data[:,i])
plt.plot(x,z)    
plt.show()
