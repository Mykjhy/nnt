import numpy as np
import matplotlib.pyplot as plt

def sigmoid(x):
    return 1 / (1 + np.exp(-x))

class Neuron:
    def __init__(self,weights,bias):
        self.weights = weights
        self.bias = bias
        
        
    def feedforward(self,inputs):
        output = np.dot(inputs,self.weights) + self.bias
        return sigmoid(output)

class NeuralNetwork:
    def __init__(self):
        
        weights1 = np.array([2 * random.random() - 1,2 * random.random() - 1])
        bias1 = 2 * random.random() - 1
        weights2 = np.array([2 * random.random() - 1,2 * random.random() - 1])
        bias2 = 2 * random.random() - 1
        
        self.h1 = Neuron(weights1,bias1)
        self.h2 = Neuron(weights2,bias2)

    def feedforward(self,x):
        out_h1 = self.h1.feedforward(x)
        out_h2 = self.h2.feedforward(x)
        
        return out_h1,out_h2
        
for i in range(10):
    net = NeuralNetwork()
    sample_size = 64
    x = np.linspace(-3,3,sample_size)
    y = x
    data = np.c_[x,y]

    new_x,new_y = net.feedforward(data)
    plt.plot(new_x,new_y)
    plt.show()
